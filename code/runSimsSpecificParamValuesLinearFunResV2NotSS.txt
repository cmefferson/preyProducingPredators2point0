# This program simulates dynamics under all parameter values in the specified parameter space, regardless of whether or not a parameter combination generates a steady state.

rm(list=ls())

setwd('figsSpecificParamValuesLinearFunResV2NotSS')

library(deSolve)

windowWidth <- 15
windowHeight <- 20
maxTime <- 50
numTimeIncrements <- 500000
t <- seq(from = 0, to = maxTime, length.out = numTimeIncrements + 1)

cexNum <- 1
maxPlotValue <- 1000000000

numInitCond <- 5


thetaVal <- c(0.1,10)
sigmaVal <- c(0.1,10)
muVal <- c(0.1)
betaVal <- c(0.1,0.5,0.9)
xiVal <- c(0.1,10)
lambda1Val <- c(1)
gamma1Val <- c(0.1,0.5,0.9)
psiVal <- c(0.1,10)
lambda2Val <- c(1)
# gamma2Val <- c(0.1,0.5,0.9) => Tie these values to gamma1Val under the assumption that technology dynamics work the same way regardless of which technology
# omegaVal <- c(0.1,10) => Tie these values to psiVal  under the assumption that technology dynamics work the same way regardless of which technology

values <- expand.grid(thetaVal,sigmaVal,muVal,betaVal,xiVal,lambda1Val,gamma1Val,psiVal,lambda2Val)
names(values) <- c('theta','sigma','mu','beta','xi','lambda1','gamma1','psi','lambda2')
values$gamma2 <- values$gamma1
values$omega <- values$psi


sim <- function(t, state, param) 
{
	with(as.list(c(state, param)), 
	{
		dK <- theta * K * (1 + sigma * T - K) / (1 + sigma * T) - A * K * L
		dL <- mu * A * K * L - L
		dT <- T^beta * (M * L)^(1 - beta) - xi * T
		dA <- -psi * A + A^(1 - lambda1 * gamma1) * L^gamma1		
		dM <- -omega * M + M^(1 - lambda2 * gamma2) * L^gamma2
		list(c(dK, dL, dT, dA, dM))
	})
}
 
for (i in 1:nrow(values))
{
	print(i)
	
	param <- c(theta = values$theta[i],sigma = values$sigma[i],mu = values$mu[i],beta = values$beta[i],xi = values$xi[i],lambda1 = values$lambda1[i],gamma1 = values$gamma1[i],psi = values$psi[i],lambda2 = values$lambda2[i],gamma2 = values$gamma2[i],omega = values$omega[i])
			
	values_K <- rep(NA,length(t) * numInitCond); dim(values_K) <- c(length(t),numInitCond)
	values_L <- rep(NA,length(t) * numInitCond); dim(values_L) <- c(length(t),numInitCond)
	values_T <- rep(NA,length(t) * numInitCond); dim(values_T) <- c(length(t),numInitCond)
	values_A <- rep(NA,length(t) * numInitCond); dim(values_A) <- c(length(t),numInitCond)
	values_M <- rep(NA,length(t) * numInitCond); dim(values_M) <- c(length(t),numInitCond)
			
	initCond_K <- runif(numInitCond,min = 0,max = 20)
	initCond_L <- runif(numInitCond,min = 0,max = 20)
	initCond_T <- runif(numInitCond,min = 0,max = 20)
	initCond_A <- runif(numInitCond,min = 0,max = 20)
	initCond_M <- runif(numInitCond,min = 0,max = 20)
				
	for (m in 1:numInitCond)
	{
		state <- c(K = initCond_K[m], L = initCond_L[m], T = initCond_T[m],A = initCond_A[m],M = initCond_M[m])
		dyn <- ode(y = state, times = t, func = sim, parms = param)
		values_K[ ,m] <- dyn[ ,2]
		values_L[ ,m] <- dyn[ ,3]
		values_T[ ,m] <- dyn[ ,4]
		values_A[ ,m] <- dyn[ ,5]
		values_M[ ,m] <- dyn[ ,6]
	}	
			
	pdf(width = windowWidth, height = windowHeight, file = paste('resSim_the',values$theta[i],'_sig',values$sigma[i],'_mu',values$mu[i],'_bet',values$beta[i],'_xi',values$xi[i],'_lOne',values$lambda1[i],'_gOne',values$gamma1[i],'_psi',values$psi[i],'_lTwo',values$lambda2[i],'_gTwo',values$gamma2[i],'_om',values$omega[i],'_idx',i,'.pdf',sep=''))
	par(mar=c(4,5,3.5,2),fig=c(0,1,0.736,0.92))
	
	# K
	if (max(values_K[is.na(values_K) == F]) <= maxPlotValue)
	{
		plot(t,values_K[ ,1],xlim=c(0,max(t)),ylim=c(min(0,min(values_K[is.na(values_K) == F])),min(max(values_K[is.na(values_K) == F]),maxPlotValue)),type = 'l',lty = 'solid',xlab=expression(italic(t)),ylab=expression(italic(K)),cex.lab=1.75*cexNum,cex.axis=1.5*cexNum)
						
		for (m in 2:numInitCond)
		{
			lines(t,values_K[ ,m],lty='solid')
		}
	}
	else
	{
		plot(t,log(values_K[ ,1]),xlim=c(0,max(t)),ylim=c(min(log(values_K[is.na(values_K) == F])),min(max(log(values_K[is.na(values_K) == F])),maxPlotValue)),type = 'l',lty = 'solid',xlab=expression(italic(t)),ylab=expression(plain(ln)(italic(K))),cex.lab=1.75*cexNum,cex.axis=1.5*cexNum)
			
		for (m in 2:numInitCond)
		{
			lines(t,log(values_K[ ,m]),lty='solid')
		}
	}
	
	mtext(as.expression(substitute(italic(theta) == thetaOut,list(thetaOut = values$theta[i]))),side=3,line = 8.5,cex=1.25*cexNum,adj=0,outer=F)
	mtext(as.expression(substitute(italic(sigma) == sigmaOut,list(sigmaOut = values$sigma[i]))),side=3,line = 7,cex=1.25*cexNum,adj=0,outer=F)
	mtext(as.expression(substitute(italic(mu) == muOut,list(muOut = values$mu[i]))),side=3,line = 5.5,cex=1.25*cexNum,adj=0,outer=F)
	mtext(as.expression(substitute(italic(beta) == betaOut,list(betaOut = values$beta[i]))),side=3,line = 4,cex=1.25*cexNum,adj=0,outer=F)
	mtext(as.expression(substitute(italic(xi) == xiOut,list(xiOut = values$xi[i]))),side=3,line = 2.5,cex=1.25*cexNum,adj=0,outer=F)
	mtext(as.expression(substitute(italic(lambda)[1] == lambda1Out,list(lambda1Out = values$lambda1[i]))),side=3,line = 1,cex=1.25*cexNum,adj=0,outer=F)
	
	mtext(as.expression(substitute(italic(gamma)[1] == gamma1Out,list(gamma1Out = values$gamma1[i]))),side=3,line = 7,cex=1.25*cexNum,adj=1,outer=F)	
	mtext(as.expression(substitute(italic(psi) == psiOut,list(psiOut = values$psi[i]))),side=3,line = 5.5,cex=1.25*cexNum,adj=1,outer=F)
	mtext(as.expression(substitute(italic(lambda)[2] == lambda2Out,list(lambda2Out = values$lambda2[i]))),side=3,line = 4,cex=1.25*cexNum,adj=1,outer=F)
	mtext(as.expression(substitute(italic(gamma)[2] == gamma2Out,list(gamma2Out = values$gamma2[i]))),side=3,line = 2.5,cex=1.25*cexNum,adj=1,outer=F)
	mtext(as.expression(substitute(italic(omega) == omegaOut,list(omegaOut = values$omega[i]))),side=3,line = 1,cex=1.25*cexNum,adj=1,outer=F)
	

	
	# L
	par(fig=c(0,1,0.552,0.736),new=T)

	if (max(values_L[is.na(values_L) == F]) <= maxPlotValue)
	{
		plot(t,values_L[ ,1],xlim=c(0,max(t)),ylim=c(min(0,min(values_L[is.na(values_L) == F])),min(max(values_L[is.na(values_L) == F]),maxPlotValue)),type = 'l',lty = 'solid',xlab=expression(italic(t)),ylab=expression(italic(L)),cex.lab=1.75*cexNum,cex.axis=1.5*cexNum)
						
		for (m in 2:numInitCond)
		{
			lines(t,values_L[ ,m],lty='solid')
		}
	}
	else
	{
		plot(t,log(values_L[ ,1]),xlim=c(0,max(t)),ylim=c(min(log(values_L[is.na(values_L) == F])),min(max(log(values_L[is.na(values_L) == F])),maxPlotValue)),type = 'l',lty = 'solid',xlab=expression(italic(t)),ylab=expression(plain(ln)(italic(L))),cex.lab=1.75*cexNum,cex.axis=1.5*cexNum)
			
		for (m in 2:numInitCond)
		{
			lines(t,log(values_L[ ,m]),lty='solid')
		}
	}
	
	
	# T
	par(fig=c(0,1,0.368,0.552),new=T)

	if (max(values_T[is.na(values_T) == F]) <= maxPlotValue)
	{
		plot(t,values_T[ ,1],xlim=c(0,max(t)),ylim=c(min(0,min(values_T[is.na(values_T) == F])),min(max(values_T[is.na(values_T) == F]),maxPlotValue)),type = 'l',lty = 'solid',xlab=expression(italic(t)),ylab=expression(italic(T)),cex.lab=1.75*cexNum,cex.axis=1.5*cexNum)
						
		for (m in 2:numInitCond)
		{
			lines(t,values_T[ ,m],lty='solid')
		}
	}
	else
	{
		plot(t,log(values_T[ ,1]),xlim=c(0,max(t)),ylim=c(min(log(values_T[is.na(values_T) == F])),min(max(log(values_T[is.na(values_T) == F])),maxPlotValue)),type = 'l',lty = 'solid',xlab=expression(italic(t)),ylab=expression(plain(ln)(italic(T))),cex.lab=1.75*cexNum,cex.axis=1.5*cexNum)
			
		for (m in 2:numInitCond)
		{
			lines(t,log(values_T[ ,m]),lty='solid')
		}
	}
	
	
	# A
	par(fig=c(0,1,0.184,0.368),new=T)

	if (max(values_A[is.na(values_A) == F]) <= maxPlotValue)
	{
		plot(t,values_A[ ,1],xlim=c(0,max(t)),ylim=c(min(0,min(values_A[is.na(values_A) == F])),min(max(values_A[is.na(values_A) == F]),maxPlotValue)),type = 'l',lty = 'solid',xlab=expression(italic(t)),ylab=expression(italic(A)),cex.lab=1.75*cexNum,cex.axis=1.5*cexNum)
						
		for (m in 2:numInitCond)
		{
			lines(t,values_A[ ,m],lty='solid')
		}
	}
	else
	{
		plot(t,log(values_A[ ,1]),xlim=c(0,max(t)),ylim=c(min(log(values_A[is.na(values_A) == F])),min(max(log(values_A[is.na(values_A) == F])),maxPlotValue)),type = 'l',lty = 'solid',xlab=expression(italic(t)),ylab=expression(plain(ln)(italic(A))),cex.lab=1.75*cexNum,cex.axis=1.5*cexNum)
			
		for (m in 2:numInitCond)
		{
			lines(t,log(values_A[ ,m]),lty='solid')
		}
	}


	# M
	par(fig=c(0,1,0,0.184),new=T)
						
	if (max(values_M[is.na(values_M) == F]) <= maxPlotValue)
	{
		plot(t,values_M[ ,1],xlim=c(0,max(t)),ylim=c(min(0,min(values_M[is.na(values_M) == F])),min(max(values_M[is.na(values_M) == F]),maxPlotValue)),type = 'l',lty = 'solid',xlab=expression(italic(t)),ylab=expression(italic(M)),cex.lab=1.75*cexNum,cex.axis=1.5*cexNum)
						
		for (m in 2:numInitCond)
		{
			lines(t,values_M[ ,m],lty='solid')
		}
	}
	else
	{
		plot(t,log(values_M[ ,1]),xlim=c(0,max(t)),ylim=c(min(log(values_M[is.na(values_M) == F])),min(max(log(values_M[is.na(values_M) == F])),maxPlotValue)),type = 'l',lty = 'solid',xlab=expression(italic(t)),ylab=expression(plain(ln)(italic(M))),cex.lab=1.75*cexNum,cex.axis=1.5*cexNum)
			
		for (m in 2:numInitCond)
		{
			lines(t,log(values_M[ ,m]),lty='solid')
		}
	}
			
	dev.off()
					
}

# rm(list=ls())

setwd('..')